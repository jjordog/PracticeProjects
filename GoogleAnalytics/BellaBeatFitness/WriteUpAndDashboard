Link to Full Write up with images: https://docs.google.com/document/d/1pVv07pufQvK-8L1IRhFrDxZ2BBCAgSc5nzGEsKi7gb4/edit?usp=sharing 

Link to tableau dashboard: https://public.tableau.com/views/GoogleDataAnalyticsFinalProject/BellaBeatFitness?:language=en-US&publish=yes&:display_count=n&:origin=viz_share_link







Smart Device Usage Trends and Implications for Bellabeat Fitness

Tableau Dashboard link: 
https://public.tableau.com/views/GoogleDataAnalyticsFinalProject/BellaBeatFitness?:language=en-US&publish=yes&:display_count=n&:origin=viz_share_link 

Github SQLite code:
https://github.com/jjordog/PracticeProjects/blob/main/GoogleAnalytics/BellaBeatFitness/SQLiteCleaning 

Business task:
The objective of my analysis is to analyze the trends in smart device usage and explore their potential application to Bellabeat customers. Additionally, I will investigate how these trends can influence Bellabeat's marketing strategy.


Sources Used:

Bellabeat Fitness Data from April 12th to May 9th

https://www.calendar-365.com/holidays/2016.html 


Documentation of Cleaning and Manipulation:

I used SQLite to create a database and clean the csv data from Bellabeat.

The code used is as follows


First I wanted to break down the data by day of the week to see if there were any days people were more active or sedentary.
/*
IDEAS
Daily Breakdown
Day of the Week Breakdown
Hours of the Day breakdown*/

--getting day of week in sqlite
select ActivityDate,
  case cast (strftime('%w', date((substr(ActivityDate,6,4)||'-0'||substr(ActivityDate,1,1)||'-'||substr(ActivityDate,3,2)))) as integer)
  when 0 then 'Sunday'
  when 1 then 'Monday'
  when 2 then 'Tuesday'
  when 3 then 'Wednesday'
  when 4 then 'Thursday'
  when 5 then 'Friday'
  else 'Saturday' end as weekday
  FROM dailyActivity_merged;
  
 SELECT *
 From dailyActivity_merged
 LIMIT 5;

--Adding day of the week column to all "daily"s
ALTER TABLE dailyActivity_merged
ADD Weekday TEXT;

ALTER TABLE dailyCalories_merged
ADD Weekday TEXT;

ALTER TABLE dailyIntensities_merged
ADD Weekday TEXT;

ALTER TABLE dailySteps_merged
ADD Weekday TEXT;

ALTER TABLE sleepDay_merged
ADD Weekday TEXT;

--Updating all daily tables with weekday
UPDATE dailyActivity_merged
SET Weekday = (
  case cast (strftime('%w', date((substr(ActivityDate,6,4)||'-0'||substr(ActivityDate,1,1)||'-'||substr(ActivityDate,3,2)))) as integer)
  when 0 then 'Sunday'
  when 1 then 'Monday'
  when 2 then 'Tuesday'
  when 3 then 'Wednesday'
  when 4 then 'Thursday'
  when 5 then 'Friday'
  else 'Saturday' end
);

UPDATE dailyCalories_merged
SET Weekday = (
  case cast (strftime('%w', date((substr(ActivityDay,6,4)||'-0'||substr(ActivityDay,1,1)||'-'||substr(ActivityDay,3,2)))) as integer)
  when 0 then 'Sunday'
  when 1 then 'Monday'
  when 2 then 'Tuesday'
  when 3 then 'Wednesday'
  when 4 then 'Thursday'
  when 5 then 'Friday'
  else 'Saturday' end
);

UPDATE dailyIntensities_merged
SET Weekday = (
  case cast (strftime('%w', date((substr(ActivityDay,6,4)||'-0'||substr(ActivityDay,1,1)||'-'||substr(ActivityDay,3,2)))) as integer)
  when 0 then 'Sunday'
  when 1 then 'Monday'
  when 2 then 'Tuesday'
  when 3 then 'Wednesday'
  when 4 then 'Thursday'
  when 5 then 'Friday'
  else 'Saturday' end
);

UPDATE dailySteps_merged
SET Weekday = (
  case cast (strftime('%w', date((substr(ActivityDay,6,4)||'-0'||substr(ActivityDay,1,1)||'-'||substr(ActivityDay,3,2)))) as integer)
  when 0 then 'Sunday'
  when 1 then 'Monday'
  when 2 then 'Tuesday'
  when 3 then 'Wednesday'
  when 4 then 'Thursday'
  when 5 then 'Friday'
  else 'Saturday' end
);

UPDATE sleepDay_merged
SET Weekday = (
  case cast (strftime('%w', date((substr(SleepDay,6,4)||'-0'||substr(SleepDay,1,1)||'-'||substr(SleepDay,3,2)))) as integer)
  when 0 then 'Sunday'
  when 1 then 'Monday'
  when 2 then 'Tuesday'
  when 3 then 'Wednesday'
  when 4 then 'Thursday'
  when 5 then 'Friday'
  else 'Saturday' end
);

--testing new tables
 SELECT * 
 From dailyActivity_merged
 LIMIT 2;
 
 SELECT * 
 From dailyCalories_merged
 LIMIT 2;
 
 SELECT * 
 From dailyIntensities_merged
 LIMIT 2;
 
 SELECT * 
 From dailySteps_merged
 LIMIT 2;

  SELECT * 
 From sleepDay_merged
 LIMIT 2;


I noticed that the hourlySteps table had incorrect columns, so I made a new table with the fixes, then I combined all of the hourly tables together. I had to drop the newly created table a few times to make modifications to the code.
--hourly steps didn't have hours or steps
 /*Initially tried to fix the original hourly_steps with a join, but it took too long so I made
 a new table with the fixes*/
ALTER TABLE minuteStepsNarrow_merged
ADD ActivityHour TEXT;

UPDATE hourlySteps_merged
SET ActivityHour =(
CAST(substr(ActivityMinute,1, instr(ActivityMinute,':')-1)||':00:00 '||substr(ActivityMinute,length(ActivityMinute)+1,-2) as TEXT)
);

CREATE TABLE hourlySteps_merged_cleaned as 
Select Id, CAST(sum(steps) AS INTEGER)  AS Steps, ActivityHour
	FROM minuteStepsNarrow_merged
	GROUP by Id, ActivityHour;
	
Drop TABLE hourlySteps_merged;

ALTER TABLE minuteStepsNarrow_merged
DROP ActivityHour;



I wanted the data tables merged by time increment: Day, Hour, and minute because I am more comfortable with Joins in SQL than Tableau at the moment. Here I merged the hourly tables
/*Merging HOURLY tables*/
CREATE TABLE hourlyActivity_merged as
SELECT
	c.Id,
	c.ActivityHour,
	c.Calories,
	i.TotalIntensity,
	i.AverageIntensity,
	s.Steps
FROM hourlyCalories_merged c
JOIN hourlyIntensities_merged i ON i.Id=c.Id and i.ActivityHour=c.ActivityHour
JOIN hourlySteps_merged_cleaned s on s.Id=c.Id and s.ActivityHour=c.ActivityHour;


I got rid of the “12:00:00 AM” from every row of the Sleepday table
-- dropping 12:00:00 AM from Sleepday 
UPDATE sleepDay_merged
SET SleepDay =(
CAST(substr(SleepDay,1,instr(SleepDay,' ')-1) as TEXT)
);

SELECT * from sleepDay_merged limit 10;



I merged the daily tables and minute tables
--Merging DAILY Activity with Sleep
CREATE TABLE dailyAll as
SELECT
d.Id,
d.ActivityDate,
d.TotalSteps,
d.TotalDistance,
d.TrackerDistance,
d.LoggedActivitiesDistance,
d.VeryActiveDistance,
d.ModeratelyActiveDistance,
d.LightActiveDistance,
d.SedentaryActiveDistance,
d.VeryActiveMinutes,
d.FairlyActiveMinutes,
d.LightlyActiveMinutes,
d.SedentaryMinutes,
d.Calories,
d.Weekday,
s.TotalSleepRecords,
s.TotalMinutesAsleep,
s.TotalTimeInBed
FROM dailyActivity_merged d
JOIN sleepDay_merged s ON s.Id=d.Id AND s.SleepDay=d.ActivityDate;

SELECT Id, SleepDay
FROM sleepDay_merged
LIMIT 10;

SELECT Id, ActivityDate
FROM dailyActivity_merged
LIMIT 10;

--Merging MINUTE activities
CREATE TABLE minuteAll as
SELECT c.Id, c.ActivityMinute, c.Calories, i.Intensity, m.METs, s.Steps
FROM minuteCaloriesNarrow_merged c
JOIN minuteIntensitiesNarrow_merged i ON c.Id=i.Id AND c.ActivityMinute=i.ActivityMinute
JOIN minuteMETsNarrow_merged m ON c.Id=m.Id AND c.ActivityMinute=m.ActivityMinute
JOIN minuteStepsNarrow_merged s ON c.Id=s.Id AND c.ActivityMinute=s.ActivityMinute;



I wanted an average aggregate table for every day, hour and minute for all of the users for easy analysis.
 --aggregating daily for export
 CREATE TABLE averageByDay as
 SELECT 
 CASE Weekday
 WHEN 'Sunday' THEN '1'
 WHEN 'Monday' THEN '2'
 WHEN 'Tuesday' THEN '3'
 WHEN 'Wednesday' THEN '4'
 WHEN 'Thursday' THEN '5'
 WHEN 'Friday' THEN '6'
 ELSE '7' end as wdnum,
 Weekday,
 avg(TotalSteps),
 avg(TotalDistance),
 avg(TrackerDistance),
 avg(LoggedActivitiesDistance),
 avg(VeryActiveDistance),
 avg(ModeratelyActiveDistance),
 avg(LightActiveDistance),
 avg(SedentaryActiveDistance),
 avg(VeryActiveMinutes),
 avg(FairlyActiveMinutes),
 avg(LightlyActiveMinutes),
 avg(SedentaryMinutes),
 avg(Calories),
 avg(TotalSleepRecords),
 avg(TotalMinutesAsleep),
 avg(TotalTimeInBed)
 FROM dailyAll
 GROUP BY Weekday
 order by wdnum;



The aggregation table came out wrong initially. I only discovered this when there was a weird shift in the graph in Tableau at both of the “12” hours, AM and PM. I realized that these are switched. I needed to make 12 AM = hour 0 and 12 PM to = hour 12. Many SQL programs have more time/date formatting, but SQLite has limited format understanding, so I had to do a more complicated case statement to get the hours to come out the way I wanted for future analysis.
 --aggregating hourly for export
 
  --this handles the 12s, couldn't get this working, so I did a nested case statement
 /*WHEN Substr(activityHour,instr(activityHour,12),2)=12 AND substr(activityHour,instr(activityHour,'0 ')+2,1)='A' THEN 0
 WHEN Substr(activityHour,instr(activityHour,12),2)=12 AND substr(activityHour,instr(activityHour,'0 ')+2,1)='P' THEN substr(ActivityHour,instr(activityHour,':'),-2)*/
 DROP table averageByHour;
 
 CREATE TABLE averageByHour as
 SELECT substr(ActivityHour,instr(ActivityHour,' ')),
 CASE
 WHEN 
		(CASE 
			WHEN substr(activityHour,instr(activityHour,'0 ')+2,1)='A' THEN substr(ActivityHour,instr(activityHour,':'),-2)
			ELSE substr(ActivityHour,instr(activityHour,':'),-2)+12 END)
		='12' 
		THEN 0
WHEN
		(CASE 
			WHEN substr(activityHour,instr(activityHour,'0 ')+2,1)='A' THEN substr(ActivityHour,instr(activityHour,':'),-2)
			ELSE substr(ActivityHour,instr(activityHour,':'),-2)+12 END)
		=24
		THEN 12
ELSE 
		trim(CASE 
			WHEN substr(activityHour,instr(activityHour,'0 ')+2,1)='A' THEN substr(ActivityHour,instr(activityHour,':'),-2)
			ELSE substr(ActivityHour,instr(activityHour,':'),-2)+12 END)
END AS hour,
 avg(calories),
 avg(totalIntensity),
 avg(AverageIntensity),
 avg(Steps)
 FROM hourlyActivity_merged
 Group by substr(ActivityHour,instr(ActivityHour,' '))
 ORDER BY substr(ActivityHour,instr(ActivityHour,' '));
 
 --TESTING
 SELECT * FROM averageByHour;
 
 SELECT substr(ActivityHour,instr(ActivityHour,' ')),
 CASE 
		WHEN substr(activityHour,instr(activityHour,'0 ')+2,1)='A' THEN substr(ActivityHour,instr(activityHour,':'),-2)
		ELSE substr(ActivityHour,instr(activityHour,':'),-2)+12 END
FROM hourlyActivity_merged
Group by substr(ActivityHour,instr(ActivityHour,' '));
 
 SELECT substr(ActivityHour,instr(ActivityHour,' ')) as ActivityHour
 FROM averageByHour
 LIMIT 5;
 
SELECT Substr(activityHour,instr(activityHour,12),2) from hourlyActivity_merged;
 


I was able to use my hourly 12AM/PM fix for the minute table as well.
 --aggregating MINUTE for export CASE AM PM HOUR*60 + MINUTE
 DROP TABLE averageByMinute;
 
 CREATE table averageByMinute as
 SELECT substr(ActivityMinute,instr(ActivityMinute,' ')) as ActivityMinute,
 (CASE
 WHEN substr(ActivityMinute,instr(ActivityMinute,'0 ')+2,1)='A' THEN substr(ActivityMinute,instr(ActivityMinute,':'),-2)*60
 ELSE (substr(ActivityMinute,instr(ActivityMinute,':'),-2)+12)*60 END)
 + substr(ActivityMinute,instr(ActivityMinute,'0 ')-2,-2) AS minute,
 avg(calories),
 avg(Intensity),
 avg(METs),
 avg(Steps)
 FROM minuteAll
 GROUP BY substr(ActivityMinute,instr(ActivityMinute,' '));
 
 --fixing 12 am and 12 pm for averageByMinute
 DROP TABLE averageByMinute;
 
 CREATE table averageByMinute as
 SELECT substr(ActivityMinute,instr(ActivityMinute,' ')) as ActivityMinute,
 (CASE
 WHEN 
		(CASE 
			WHEN substr(ActivityMinute,instr(ActivityMinute,'0 ')+2,1)='A' THEN substr(ActivityMinute,instr(ActivityMinute,':'),-2)
			ELSE substr(ActivityMinute,instr(ActivityMinute,':'),-2)+12 END)
		='12' 
		THEN 0
WHEN
		(CASE 
			WHEN substr(ActivityMinute,instr(ActivityMinute,'0 ')+2,1)='A' THEN substr(ActivityMinute,instr(ActivityMinute,':'),-2)
			ELSE substr(ActivityMinute,instr(ActivityMinute,':'),-2)+12 END)
		=24
		THEN 12
ELSE 
		trim(CASE 
			WHEN substr(ActivityMinute,instr(ActivityMinute,'0 ')+2,1)='A' THEN substr(ActivityMinute,instr(ActivityMinute,':'),-2)
			ELSE substr(ActivityMinute,instr(ActivityMinute,':'),-2)+12 END) END)*60
+ substr(ActivityMinute,instr(ActivityMinute,'0 ')-2,-2) AS minute,
 avg(calories),
 avg(Intensity),
 avg(METs),
 avg(Steps)
 FROM minuteAll
 GROUP BY substr(ActivityMinute,instr(ActivityMinute,' '));
 
 SELECT * FROM averageByMinute;
 
 SELECT substr(ActivityMinute,instr(ActivityMinute,'0 ')-2,-2)
 FROM minuteAll



I wanted to use the weightLog data, however only two users consistently had weight data. All other users had less than 4 data points for their weight data throughout the month.
--Looking for insights from weightLogInfo_merged 

 
 --need date as a sortable integer
 CREATE TABLE weightLogInfo_merged_DATENUM AS
 SELECT *, substr(w2.DATE,instr(w2.DATE,' '),-4)||
 substr(w2.Date,instr(w2.Date,'/'),-5)||
 CASE
 WHEN instr(w2.date,'/2016')=4 then '0'
 else '' end||substr(w2.Date,instr(w2.date,'/')+1,instr(w2.Date,'/2016')-instr(w2.Date,'/')-1) as datenum
 FROM weightLogInfo_merged w2;
 
 --IT TURNS OUT ONLY TWO USERS CONSISTENTLY ADDED TO THE weightLogInfo_merged table making it nearly useless
SELECT count(distinct id)
FROM weightLogInfo_merged;




Link to Github file of SQL code: https://github.com/jjordog/PracticeProjects/blob/main/GoogleAnalytics/BellaBeatFitness/SQLiteCleaning 


Summary of Analysis and Supporting Visualizations:

People have the most step activity on Mondays and the least on Sundays
Average Step Count by Weekday

However, this does not mean that people are more sedentary on Sundays, there is just less high intensity activity on Sundays.
Sedentary Time in Minutes by Weekday

There was very little morning activity, and the most active times for most users were from noon to 2:30 PM and 5:00 PM to 7:00 PM

If this were a real company I would ask how sleep minutes are tracked. Is the date in the table the night that the person slept or the morning after the person slept?

I am assuming that the date is the morning after. This puts the most rested day on Sunday and the least rested day on Monday. Sunday, the day with the most sleep, was still only 7.96 hours. There was not a single day where the average number of hours slept was above 8. The Monday average is only 6.76 hours of sleep and the highest weekday being Wednesday with 7.26 hours of sleep.
Weekday Sleep Minutes




The most active days for the average user were Mondays and Tuesday with much less active time on Fridays.
Weekday Very Active Minutes

The Bella Beat Fitness band was far better at tracking users activity compared to users logged active time





Recommendations

Helping Users
There are two main branches of recommendations to consider: Reinforce users at their best or help lift users do more at their worst.

Reinforcement:
Send positive notifications when step goals are met.


Send reminders on Mondays, Tuesdays, and Saturdays to continue working towards their step goals.


Send positive notifications on Saturday and Sunday morning for getting more sleep the night before.


Send positive notification for being active at peak times: 2:20 PM and 6:00-7:00 PM

Lift:
Set sleep goals daily. Even the day with the most sleep was under the recommended 8 hours. There are many studies on the positive aspects of getting more sleep. Send users notifications leading up to bed time to remind them to work towards better sleep and tell them some of the positive consequences of getting more sleep.


Give users notifications to suggest being more active during low activity days and times. Push users to get more steps in the morning, and to try to be more active Wednesday-Friday.

Marketing:
Users were able to get a far more accurate readout of their activity and travel distance when using the product. The manually logged distances were hugely overshadowed by the automatic tracking.

Further Data Collection Experiments:
Do users use the tracker more if it sends positive notifications, like streaks for wearing the device often or days in a  row. You could give users account badges for use. Hopefully this will lead to users giving some free marketing on social media by sharing their badges. We can check if users are more likely to use the device for longer with these additions.

Sleep competitions. Setup local or friend sleep competitions for consistency of sleep and points for getting closer to 8 hours of sleep to try to get users to sleep more, so that they can be happier customers. We can do a small experiment and see if this helps users get more sleep and raise their happiness.
